ggplot(dfMap, aes(x=lon, y=lat)) +
theme_bw() +
theme(plot.title = element_text(size = rel(1.5))) +
geom_point(aes(colour = Value)) +
geom_polygon(data=baseData, aes(x=long, y=lat, group=group),
colour="black", fill="white", alpha=0) +
coord_map("albers", lat0=30, lat1=40,
xlim=c(-102, -100), ylim=c(30, 31)) +
theme(panel.grid.major=element_line(colour="black", size = 1)) +
scale_x_continuous(breaks = seq(-102, -100, 1))
ggplot(dfMap, aes(x=lon, y=lat)) +
theme_bw() +
theme(plot.title = element_text(size = rel(1.5))) +
geom_point(aes(colour = Value)) +
geom_polygon(data=baseData, aes(x=long, y=lat, group=group),
colour="black", fill="white", alpha=0) +
coord_map("albers", lat0=30, lat1=40,
xlim=c(-105, -100), ylim=c(30, 34)) +
theme(panel.grid.major=element_line(colour="black", size = 1)) +
scale_x_continuous(breaks = seq(-105, -100, 1)) +
scale_y_continuous(breaks = seq(30, 34, 1))
sub_dat <- filter(dfMap, lon >= -105, lon <= -100, lat >= 30, lat <= 33)
sub_dat <- dplyr::filter(dfMap, lon >= -105, lon <= -100, lat >= 30, lat <= 33)
sub_dat <- dplyr::filter(dfMap, lon >= -105, lon <= -104, lat >= 30, lat <= 33)
sub_dat <- dplyr::filter(dfMap, lon >= -105, lon <= -104, lat >= 32, lat <= 33)
sub_dat <- dplyr::filter(dfMap, lon >= -105, lon <= -104.9, lat >= 32, lat <= 33)
sub_dat <- dplyr::filter(dfMap, lon >= -105, lon <= -104.9, lat >= 32.9, lat <= 33)
sub_dat <- dplyr::filter(dfMap, lon >= -105, lon <= -104.9, lat >= 32.4, lat <= 33)
ggplot(dfMap, aes(x=lon, y=lat)) +
theme_bw() +
theme(plot.title = element_text(size = rel(1.5))) +
geom_point(aes(colour = Value)) +
geom_polygon(data=baseData, aes(x=long, y=lat, group=group),
colour="black", fill="white", alpha=0) +
coord_map("albers", lat0=30, lat1=40,
xlim=c(-105, -100), ylim=c(30, 34)) +
theme(panel.grid.major=element_line(colour="black", size = 1)) +
scale_x_continuous(breaks = seq(-105, -100, 1)) +
scale_y_continuous(breaks = seq(30, 34, 1)) +
geom_path(data=sub_dat, aes(x=lon, y=lat), color="red", size=1)
sub_dat <- dplyr::filter(dfMap, lon >= -105, lon <= -104.9, lat == 32.4, lat == 31)
sub_dat <- dplyr::filter(dfMap, lon >= -105, lon <= -104.9, (lat == 32.4 | lat == 31) )
sub_dat <- dplyr::filter(dfMap, lon >= -105, lon <= -104.9 & (lat == 32.4 | lat == 31) )
sub_dat <- dplyr::filter(dfMap, lon == -105 , lat == 32)
sub_dat <- dplyr::filter(dfMap, lon == -105 , lat == 32.5)
sub_dat <- dplyr::filter(dfMap, lon == -105 , lat <= 32.5)
sub_dat <- dplyr::filter(dfMap, lon <= -105 , lat <= 32.5)
sub_dat <- dplyr::filter(dfMap, lon == -105 , lat == 30.9)
install.packages(c("ISLR","boot", "glmnet", "tree", "randomForest", "gbm"))
library(ISLR)
library(boot)
set.seed(1)
plot(Auto$horsepower,Auto$mpg)
cv.error.10= rep (0 ,10)
for (i in 1:10) {
glm.fit=glm(mpg~poly(horsepower ,i),data=Auto)
cv.error.10[i]=cv.glm(Auto ,glm.fit ,K=10)$delta[1] ## extracting MSE from CV
}
cv.error.10
cv.poly= seq(1 ,10)
cv.poly
plot(cv.poly, cv.error.10, type="b")
library(glmnet)
library(ISLR)
library(dplyr)
library(tidyr)
library(boot)
#fix(Hitters)
names(Hitters)
set.seed(1)
Hitters <- na.omit(Hitters)
train <- sample(1:nrow(Hitters), nrow(Hitters)/2)
test <- (-train)
ols <- lm(Salary ~ AtBat + Hits + HmRun + RBI + Walks + Years + CAtBat + CHits + CHmRun + CRuns + CRBI + CWalks
+ League + Division + PutOuts + Assists + Errors  + NewLeague , Hitters[train,])
summary(ols)
train
?sample
test
ols <- glm(Salary ~ AtBat + Hits + HmRun + RBI + Walks + Years + CAtBat + CHits + CHmRun + CRuns + CRBI + CWalks
+ League + Division + PutOuts + Assists + Errors  + NewLeague , family=gaussian, data=Hitters[train,])
summary(ols)
ols_mse <- cv.glm(Hitters[train,] ,ols ,K=10)$delta[1]
ols_mse
ols.pred <- predict(ols, newdata=Hitters[test,])
ols_test <- mean((ols.pred - y_test)^2)
ols_test
y_test <- Hitters$Salary[test]
ols.pred <- predict(ols, newdata=Hitters[test,])
ols_test <- mean((ols.pred - y_test)^2)
ols_test
ols <- lm(Salary ~ AtBat + Hits + HmRun + RBI + Walks + Years + CAtBat + CHits + CHmRun + CRuns + CRBI + CWalks
+ League + Division + PutOuts + Assists + Errors  + NewLeague , Hitters[train,])
summary(ols)
ols <- glm(Salary ~ AtBat + Hits + HmRun + RBI + Walks + Years + CAtBat + CHits + CHmRun + CRuns + CRBI + CWalks
+ League + Division + PutOuts + Assists + Errors  + NewLeague , family=gaussian, data=Hitters[train,])
summary(ols)
ols_mse <- cv.glm(Hitters[train,] ,ols ,K=10)
?cv.glm
ols_mse
ols_mse <- cv.glm(Hitters[train,] ,ols ,K=10)$delta[1]
ols_mse
ols_test
ols_mse <- cv.glm(Hitters[-train,] ,ols ,K=10)$delta[1]
ols_mse <- cv.glm(Hitters[test,] ,ols ,K=10)$delta[1]
x <- model.matrix(Salary~.,Hitters)[,-1]
y <- Hitters$Salary
x <- model.matrix(Salary~.,Hitters)
x <- model.matrix(Salary~.,Hitters)[,-1]
y <- Hitters$Salary
ridge.mod <- glmnet(x[train,], y[train], alpha =0) ## aloph=0 for ridge
ridge.mod$lambda[50]
coef(ridge.mod)[,50]
coef(ridge.mod)[,1]
coef(ridge.mod)[,98]
?glmnet
ridge.mod$lambda
coef(ridge.mod)[,50]
cv.out <- cv.glmnet(x[train,], y[train], alpha=0, nfolds=10)
plot(cv.out)
minlambda <- cv.out$lambda.min
minlambda
log(minlambda)
selambda <- cv.out$lambda.1se
selambda
log(selambda)
log(minlambda)
ridge.pred=predict(ridge.mod ,s=minlambda ,newx=x[test ,])
ridge_test <- mean(( ridge.pred - y_test)^2)
ridge_test
ols_test
lasso.mod <- glmnet(x[train,], y[train], alpha =1)
plot(lasso.mod)
predict(ridge.mod,type="coefficients",s=minlambda)
?predict.glmnet
lasso.mod <- glmnet(x[train,], y[train], alpha =1)
plot(lasso.mod)
cv.out <- cv.glmnet(x[train,], y[train], alpha=1, nfolds=10)
# Small lambda is closer to OLS
# Note that lasso provides very little improvement over OLS
plot(cv.out)
?plot.glmnet
cv.out <- cv.glmnet(x[train,], y[train], alpha=1, nfolds=10)
# Small lambda is closer to OLS
# Note that lasso provides very little improvement over OLS
plot(cv.out)
minlambda <- cv.out$lambda.min
minlambda
log(minlambda)
selambda <- cv.out$lambda.1se
selambda
log(selambda)
# Extract the MSE with ridge
my_cv_lasso <- data_frame(lambda=cv.out$lambda,cvm=cv.out$cvm)
lasso_minmse <- filter(my_cv_lasso, lambda==minlambda)$cvm
lasso_minmse
# Lasso coefficients at optimal lambda
predict(lasso.mod,type="coefficients",s=minlambda)
minlambda
log(minlambda)
log(selambda)
lasso_minmse
predict(lasso.mod,type="coefficients",s=minlambda)
ols_mse
ridge_minmse
lasso_minmse
library(tree)
library(randomForest)
library(gbm) # Need this package for Boosting
library(ISLR)
library(dplyr)
library(tidyr)
names(Hitters)
Hitters <- na.omit(Hitters)
my_tree <- tree(Salary ~ ., Hitters, subset=train)
summary(my_tree)
plot(my_tree)
text(my_tree, pretty=0)
?tree
cv_results <- cv.tree(my_tree)
plot(cv_results$size, cv_results$dev, type='b')
my_pruned <- prune.tree(my_tree, best=3)
plot(my_pruned)
text(my_pruned, pretty=0)
yhat_tree <- predict(my_pruned,newdata=Hitters[test,])
tree_test <- mean((yhat_tree - Hitters$Salary[test])^2)
tree_test
my_bag <- randomForest(Salary ~ ., data=Hitters, subset=train, mtry=12, importance=TRUE)
my_bag
yhat_bag <- predict(my_bag,newdata=Hitters[test,])
bag_test <- mean((yhat_bag - Hitters$Salary[test])^2)
bag_test
importance(my_bag)
varImpPlot(my_bag)
my_forest <- randomForest(Salary ~ ., data=Hitters, subset=train, mtry=4, importance=TRUE)
my_forest
yhat_forest <- predict(my_forest,newdata=Hitters[test,])
forest_test <- mean((yhat_forest - Hitters$Salary[test])^2)
forest_test
importance(my_forest)
varImpPlot(my_forest)
#### Boosting ####
my_boost <- gbm(Salary ~ ., data=Hitters[train,], distribution="gaussian",
n.trees=5000, interaction.depth = 2, shrinkage = 0.001)
summary(my_boost)
?randomForest
bag_test
importance(my_bag)
varImpPlot(my_bag)
boost_test
summary(my_boost)
importance(my_forest)
varImpPlot(my_forest)
summary(my_boost)
y <- seq(1,100) + rnorm(100, 0, 2)
var(y)
rm(list=ls())
y <- seq(1,100) + rnorm(100, 0, 2)
var(y)
library(ggmap)
china <- get_map('China')
ggmap(china)
install.packages('ggmap')
install.packages("ggmap")
library(ggmap)
ggmap(china)
ggmap(china, extent = "normal")
ggmap('china')
gmap(china)
qmap(china)
china <- get_map('China', zoom = 4)
ggmap(china)
install.packages('ggproto')
library(VGAM)
test <- rfrechet(1000, shape = 3)
test <- sapply(c(1:100), function(i) rfrechet(1000, shape = 3))
test <- sapply(c(1:20), function(i) rfrechet(1000, shape = 3))
View(test)
apply(test, 1, function(i) sum(. <= 1))
apply(test, 1, function(i) sum(']' <= 1))
apply(test, 2, function(i) sum(']' <= 1))
View(test)
apply(test, 2, function(i) sum(i <= 1))
apply(test, 2, function(i) sum(i <= i[1]))
apply(test, 1, function(i) sum(i <= i[1]))
hist(apply(test, 1, function(i) sum(i <= i[1])))
max1 <- apply(test, 1, function(i) sum(i <= i[1]))
mean(max1)
max1 <- apply(test, 1, function(i) sum(i <= i[1])/20)
mean(max1)
test <- sapply(c(1:20), function(i) rfrechet(1000, shape = 4))
max1 <- apply(test, 1, function(i) sum(i <= i[1])/20)
mean(max1)
test <- sapply(c(1:20), function(i) rfrechet(1000, shape = 10))
max1 <- apply(test, 1, function(i) sum(i <= i[1])/20)
mean(max1)
test <- sapply(c(1:20), function(i) rfrechet(5000, shape = 10))
max1 <- apply(test, 1, function(i) sum(i <= i[1])/20)
mean(max1)
test <- sapply(c(1:20), function(i) rfrechet(5000, shape = 20))
max1 <- apply(test, 1, function(i) sum(i <= i[1])/20)
mean(max1)
test <- sapply(c(1:20), function(i) rfrechet(5000, shape = 1))
max1 <- apply(test, 1, function(i) sum(i <= i[1])/20)
mean(max1)
hist(max1)
test <- sapply(c(1:20), function(i) rfrechet(5000, shape = 1))
max1 <- apply(test, 1, function(i) sum(i <= 0.5*i[1])/20)
mean(max1)
hist(max1)
test <- sapply(c(1:20), function(i) rfrechet(1000, shape = 1))
max1 <- apply(test, 1, function(i) sum(i <= 0.5*i[1])/20)
mean(max1)
hist(max1)
max1 <- apply(test, 1, function(i) sum(i <= 0.1*i[1])/20)
mean(max1)
max1 <- apply(test, 1, function(i) sum(i <= 2*i[1])/20)
mean(max1)
hist(test[,1])
plot(density(test[,1]))
test <- sapply(c(1:20), function(i) rfrechet(1000, shape = 3))
max1 <- apply(test, 1, function(i) sum(i <= 2*i[1])/20)
mean(max1)
hist(max1)
plot(density(test[,1]))
test <- sapply(c(1:20), function(i) rfrechet(1000, shape = 6))
plot(density(test[,1]))
test <- sapply(c(1:20), function(i) rfrechet(1000, shape = 3))
plot(density(test[,1]))
test <- sapply(c(1:20), function(i) rfrechet(1000, shape = 1))
plot(density(test[,1]))
max1 <- apply(test, 1, function(i) sum(i <= 10*i[1])/20)
mean(max1)
test <- sapply(c(1:20), function(i) rfrechet(1000, shape = 20))
plot(density(test[,1]))
library(devtools)
install_github("susanathey/causalTree")
library(causalTree)
tree <- causalTree(y~ x1 + x2 + x3 + x4, data = simulation.1, treatment = simulation.1$treatment,
split.Rule = "CT", cv.option = "CT", split.Honest = T, cv.Honest = T, split.Bucket = F,
xval = 5, cp = 0, minsize = 20, propensity = 0.5)
opcp <- tree$cptable[,1][which.min(tree$cptable[,4])]
opfit <- prune(tree, opcp)
rpart.plot(opfit)
data("simulation.1")
View(simulation.1)
summary(tree)
library(dplyr)
library(tidyr)
install.packages('vars')
library(vars)
?causality
library(tseries)
data("fred", package="PoEdata")
install.packages('PoEdata')
library(devtools)
install_git("https://github.com/ccolonescu/PoEdata")
data("fred", package="PoEdata")
fred <- ts(fred, start=c(1960,1),end=c(2009,4),frequency=4)
rm(list=ls())
data("fred", package="PoEdata")
ts.plot(fred[,"c"],fred[,"y"], type="l",
lty=c(1,2), col=c(1,2))
legend("topleft", border=NULL, legend=c("c","y"),
lty=c(1,2), col=c(1,2))
??ts.plot
fred <- ts(fred, start=c(1960,1),end=c(2009,4),frequency=4)
ts.plot(fred[,"c"],fred[,"y"], type="l", lty=c(1,2), col=c(1,2))
str(fred)
legend("topleft", border=NULL, legend=c("c","y"), lty=c(1,2), col=c(1,2))
ts.plot(fred[,'c'],fred[,'y'], type="l", lty=c(1,2), col=c('blue', 'red'))
ts.plot(fred[,'c'],fred[,'y'], type="l", lty=c(1,2), col=c('blue', 'red'))
legend("topleft", border=NULL, legend=c("Consumption","Income"), lty=c(1,2), col=c('blue', 'red'))
?legend
ts.plot(fred[,'c'],fred[,'y'], type="l", lty=c(1,2), col=c('blue', 'red'))
adf.test(fred[,'c'])
adf.test(fred[,'y'])
adf.test(diff(fred[,'c'])) # Fail to reject
adf.test(diff(fred[,'y'])) # Fail to reject
reg1 <- lm(c ~ seq(1, 200, by = 1), data = fred)
adf.test(reg1$residuals) # Fail to reject
plot(reg1$residuals)
ts.plot(fred[,'c'],fred[,'y'], type="l", lty=c(1,2), col=c('blue', 'red'))
reg1 <- lm(y ~ seq(1, 200, by = 1), data = fred)
plot(reg1$residuals)
library(Hmisc)
?HMsic
?Hmsic
?Hmisc
??Hmisc
??hpfilter
library(mFilter)
de_c <- hpfilter(fred[,'c'], freq=12,type=c("lambda"))
adf.test(de_c$cycle) # Fail to reject
adf.test(de_c$cycle) # Fail to reject
adf.test(de_y$cycle) # Fail to reject
de_c <- hpfilter(fred[,'c'], freq=12, type=c("lambda"))
de_y <- hpfilter(fred[,'y'], freq=12, type=c("lambda"))
adf.test(de_c$cycle) # Fail to reject
adf.test(de_y$cycle) # Fail to reject
# The ADF tests confirm that they are not stationary.
de_c <- hpfilter(fred[,'c'], freq=12, type=c("lambda"))$cycle
de_y <- hpfilter(fred[,'y'], freq=12, type=c("lambda"))$cycle
plot(de_c, type = 'l')
lines(de_y, lty = 2, col = 'red')
plot(de_c, type = 'l', lty = 1, col = 'blue', ylim = c(-0.1, 0.1))
lines(de_y, lty = 2, col = 'red')
plot(de_c, type = 'l', lty = 1, col = 'blue', ylim = c(-0.05, 0.05))
lines(de_y, lty = 2, col = 'red')
plot(de_c, type = 'l', lty = 1, col = 'blue', ylim = c(-0.02, 0.02))
lines(de_y, lty = 2, col = 'red')
plot(de_c, type = 'l', lty = 1, col = 'blue', ylim = c(-0.03, 0.03))
lines(de_y, lty = 2, col = 'red')
De_fred <- as.matrix(cbind(de_c, de_y))
Var_out <- VAR(De_fred)
summary(Var_out)
?vars
??vars
Var_out <- vars::vars(De_fred)
?VAR
Var_out <- VAR(fred, lag.max = 4, type = 'trend')
summary(Var_out)
Var_out <- VAR(fred, lag.max = 4, type = 'both')
summary(Var_out)
Var_out <- VAR(fred, lag.max = 4, type = 'both', ic = 'SC')
print(Var_out)
summary(Var_out)
adf1 <- summary(ur.df(fred[,'c'], type = "trend", lags = 2))
adf1
adf1 <- summary(ur.df(fred[,'c'], type = "trend", lags = 0))
adf1
VARselect(fred, lag.max = 8, type = "both")
Var_out <- VAR(fred, p = 2, type = 'both')
summary(Var_out)
?arima
ar1 <- arima(fred[,'c'], order = c(4, 0, 0))
ar1 <- arima(fred[,'c'], order = c(2, 0, 0))
summary(fred)
ar1 <- arima(fred[,'c'], order = c(1, 0, 0))
VARselect(fred, lag.max = 8, type = "both")
Var_out <- VAR(fred, p = 2, type = 'both')
summary(Var_out)
print(Var_out)
predict(Var_out, 1)
predict(Var_out, n.ahead = 2)
?causality()
?causality(Var_out, cause = 'y')
causality(Var_out, cause = 'y')
causality(Var_out, cause = 'c')
ts.plot(fred[,'c'],fred[,'y'], type="l", lty=c(1,2), col=c('blue', 'red'))
VARselect(fred, lag.max = 8, type = "both")
predict(Var_out, n.ahead = 2)
?arima
ar1 <- arima(fred[,'c'], order = c(1, 1, 0))
adf.test(diff(fred[,'c'])) # Fail to reject the null of not stationary
adf.test(diff(fred[,'y'])) # Fail to reject the null of not stationary
adf.test(diff(fred[,'c'])) # Reject the null of not stationary
adf.test(diff(fred[,'y'])) # Reject the null of not stationary
ar1 <- arima(fred[,'c'], order = c(2, 1, 0))
sapply(seq(1, 8), function(i) arima(fred[,'c'], order = c(i, 1, 0))$aic)
ar1_aic <- sapply(seq(1, 8), function(i) arima(fred[,'c'], order = c(i, 1, 0))$aic)
min(ar1_aic)
which(ar1_aic = min(ar1_aic))
which(ar1_aic == min(ar1_aic))
ar_y_aic <- sapply(seq(1, 8), function(i) arima(fred[,'y'], order = c(i, 1, 0))$aic)
which(ar_y_aic == min(ar_y_aic))
ar_c_aic <- sapply(seq(1, 10), function(i) arima(fred[,'c'], order = c(i, 1, 0))$aic)
which(ar_c_aic == min(ar_c_aic))
ar_y_aic <- sapply(seq(1, 10), function(i) arima(fred[,'y'], order = c(i, 1, 0))$aic)
which(ar_y_aic == min(ar_y_aic))
ar_c_aic <- sapply(seq(1, 8), function(i) arima(fred[,'c'], order = c(i, 1, 0))$aic)
which(ar_c_aic == min(ar_c_aic))
ar_y_aic <- sapply(seq(1, 8), function(i) arima(fred[,'y'], order = c(i, 1, 0))$aic)
which(ar_y_aic == min(ar_y_aic))
ar_c <- arima(fred[,'c'], order = c(3, 1, 0))
ar_y <- arima(fred[,'y'], order = c(7, 1, 0))
ar_c <- arima(fred[,'c'], order = c(3, 1, 0))
ar_y <- arima(fred[,'y'], order = c(7, 1, 0))
predict(ar_c, n.ahead = 2)
predict(ar_y, n.ahead = 2)
ts.plot(fred[,'c'],fred[,'y'], type="l", lty=c(1,2), col=c('blue', 'red'))
predict(ar_y, n.ahead = 2)
predict(ar_c, n.ahead = 2)
?adf.test
library(tseries)
predict(ar_c)
print(ar_c)
adf.test(fred[,'c']) # Fail to reject the null of not stationary
devtools::install_github("jcizel/FredR")
5490, 1199, 2200, 2400, 649, 2271, 5624)
5490, 1199,  2200, 2400, 649,  2271, 5624)
yield <- c(2114, 5455,  1834, 5698, 4743, 2583, 2240,
2234, 4662,  1829, 9282, 2553, 1485, 2108,
2083, 3403,  1330, 3241, 1881, 2795, 1948,
3186, 2471,  1874, 4800, 2070, 1000, 3008,
3762, 4700,  2267, 6152, 3456, 1625, 3806,
1084, 1743,  1090, 1843, 1139, 3467, 1326,
5747, 8564,  4122, 5360, 5878, 2562, 6617,
2394, 10345, 1955, 7118, 1800, 2000, 2509,
3535, 6246,  2469, 3295, 2123, 2016, 4310,
3380, 9513,  2218, 5849, 6205, 3812, 2801,
2453, 2578,  3014, 4258, 3380, 1650, 4766,
543,  211,   535,  5277, 585,  1000, 1228,
1153, 2595,  1031, 6694, 2000, 1492, 1247,
2988, 3066,  1743, 1250, 903,  1623, 3056,
2011, 1813,  1710, 3493, 753,  941,  2058,
1795, 2437,  1809, 2286, 2343, 1685, 2571,
2089, 9721,  1492, 7580, 3870, 2679, 2300,
2598, 3243,  1996, 3655, 995,  1012, 3102,
912,  4664,  1250, 6704, 4063, 2300, 1149,
3127, 8673,  2208, 7278, 3761, 2664, 2702,
5490, 1199,  2200, 2400, 649,  2271, 5624)
n <- length(yield)
rm(list=ls())
sum(log(yield))
yield <- c(2114, 5455,  1834, 5698, 4743, 2583, 2240,
2234, 4662,  1829, 9282, 2553, 1485, 2108,
2083, 3403,  1330, 3241, 1881, 2795, 1948,
3186, 2471,  1874, 4800, 2070, 1000, 3008,
3762, 4700,  2267, 6152, 3456, 1625, 3806,
1084, 1743,  1090, 1843, 1139, 3467, 1326,
5747, 8564,  4122, 5360, 5878, 2562, 6617,
2394, 10345, 1955, 7118, 1800, 2000, 2509,
3535, 6246,  2469, 3295, 2123, 2016, 4310,
3380, 9513,  2218, 5849, 6205, 3812, 2801,
2453, 2578,  3014, 4258, 3380, 1650, 4766,
543,  211,   535,  5277, 585,  1000, 1228,
1153, 2595,  1031, 6694, 2000, 1492, 1247,
2988, 3066,  1743, 1250, 903,  1623, 3056,
2011, 1813,  1710, 3493, 753,  941,  2058,
1795, 2437,  1809, 2286, 2343, 1685, 2571,
2089, 9721,  1492, 7580, 3870, 2679, 2300,
2598, 3243,  1996, 3655, 995,  1012, 3102,
912,  4664,  1250, 6704, 4063, 2300, 1149,
3127, 8673,  2208, 7278, 3761, 2664, 2702,
5490, 1199,  2200, 2400, 649,  2271, 5624)
sum(log(yield))
install.packages('kableExtra')
install.packages('dplyr')
rnorm(1000, 0, 1)
plot(rnorm(10000, 0, 1))
plot(rnorm(10000, 0, 1), type = 'l')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(dplyr)
shiny::runApp('Dropbox (Personal)/PubsGitHub/ChinaGrainPrice')
